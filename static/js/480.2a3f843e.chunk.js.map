{"version":3,"file":"static/js/480.2a3f843e.chunk.js","mappings":"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","sources":["Api.jsx","components/BackLink/BackLink.jsx","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'dc4ab5f19e3eea083dd36e20fcfaec1f';\n\nasync function getMovies(url = '', params = {}) {\n  const response = await axios.get(url, params);\n  return response.data.results;\n}\n\nexport function fetchTrendMovie() {\n  return getMovies(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\nexport function fetchSearchMovies(query) {\n  return getMovies(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function fetchMoviesReviews(movieId) {\n  return getMovies(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&`\n  );\n}\n\nexport async function fetchMoviesDetails(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const result = response.data;\n  return result;\n}\n\nexport async function fetchMoviesCast(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const result = response.data.cast;\n  return result;\n}\n\nexport async function fetchMoviesGenres(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const filmGenres = response.data.genres.map(genre => genre.name);\n  return filmGenres;\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <div>\n      <StyledLink to={to}>{children}</StyledLink>\n    </div>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.object.isRequired,\n  children: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const FilmCard = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const FilmTitle = styled.h1`\n  display: block;\n`;\n\nexport const FilmInfo = styled.div`\n  padding: 20px;\n`;\n","import { useState, useEffect, useCallback, Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMoviesDetails, fetchMoviesGenres } from '../../Api';\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { FilmCard, FilmTitle, FilmInfo } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [film, setFilm] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n\n  const getFilmsDetails = useCallback(async () => {\n    if (!movieId) {\n      return;\n    }\n    try {\n      const movies = await fetchMoviesDetails(movieId);\n      const moviesGenres = await fetchMoviesGenres(movieId);\n\n      setFilm(movies);\n      setGenres(moviesGenres);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  useEffect(() => {\n    getFilmsDetails();\n  }, [getFilmsDetails]);\n\n  const releaseDate = new Date(film.release_date);\n  const { release_date, title, name, popularity, overview, poster_path } = film;\n\n  return (\n    <main>\n      <BackLink to={location.state?.from ?? '/movies'}>â—€ Back</BackLink>\n      {isLoading && <h2>Loading information...</h2>}\n      {error && <h2>Oops...there is nothing, try again</h2>}\n      {!error ? (\n        <FilmCard>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n              alt={title}\n            />\n          </div>\n          <FilmInfo>\n            <FilmTitle>\n              {film.title ? title : name} (\n              {releaseDate.getFullYear(release_date)})\n            </FilmTitle>\n            <h3>Overview</h3>\n            {overview ? <p>{overview}</p> : <p>No overview</p>}\n            <h3>User score</h3>\n            <p>{popularity}</p>\n            <h3>Genres</h3>\n            {genres.map(genre => (\n              <div key={genre}> {<li>{genre}</li>}</div>\n            ))}\n          </FilmInfo>\n        </FilmCard>\n      ) : (\n        <h2>Oops...there is nothing, try again</h2>\n      )}\n\n      {!error && (\n        <div>\n          <div>\n            <Link to=\"cast\" state={{ from: location.state?.from ?? '/movies' }}>\n              Cast\n            </Link>\n          </div>\n          <div>\n            <Link\n              to=\"reviews\"\n              state={{ from: location.state?.from ?? '/movies' }}\n            >\n              Reviews\n            </Link>\n          </div>\n        </div>\n      )}\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["BASE_URL","KEY","getMovies","url","params","axios","response","data","results","fetchTrendMovie","fetchSearchMovies","query","fetchMoviesReviews","movieId","fetchMoviesDetails","result","fetchMoviesCast","cast","fetchMoviesGenres","filmGenres","genres","map","genre","name","StyledLink","styled","Link","BackLink","to","children","FilmCard","FilmTitle","FilmInfo","useParams","useState","film","setFilm","setGenres","isLoading","setIsLoading","error","setError","location","useLocation","getFilmsDetails","useCallback","movies","moviesGenres","useEffect","releaseDate","Date","release_date","title","popularity","overview","poster_path","state","from","src","alt","getFullYear","Suspense","fallback"],"sourceRoot":""}