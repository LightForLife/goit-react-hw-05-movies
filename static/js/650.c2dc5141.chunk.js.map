{"version":3,"file":"static/js/650.c2dc5141.chunk.js","mappings":"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","sources":["Api.jsx","components/FilmList/FilmList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'dc4ab5f19e3eea083dd36e20fcfaec1f';\n\nasync function getMovies(url = '', params = {}) {\n  const response = await axios.get(url, params);\n  return response.data.results;\n}\n\nexport function fetchTrendMovie() {\n  return getMovies(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\nexport function fetchSearchMovies(query) {\n  return getMovies(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US&include_adult=false`\n  );\n}\n\nexport function fetchMoviesReviews(movieId) {\n  return getMovies(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&`\n  );\n}\n\nexport async function fetchMoviesDetails(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const result = response.data;\n  return result;\n}\n\nexport async function fetchMoviesCast(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const result = response.data.cast;\n  return result;\n}\n\nexport async function fetchMoviesGenres(movieId) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  const filmGenres = response.data.genres.map(genre => genre.name);\n  return filmGenres;\n}\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <div>\n      {films.map(({ id, name, title }) => (\n        <div key={id}>\n          {\n            <div>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <h2>{title ? title : name}</h2>\n              </Link>\n            </div>\n          }\n        </div>\n      ))}\n    </div>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = event => {\n    setQuery(event.currentTarget.value.trim());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (query === '') {\n      alert(`Please enter text to search`);\n      return;\n    }\n\n    onSubmit(query);\n  };\n\n  return (\n    <div>\n      <header>\n        <form onSubmit={handleSubmit}>\n          <input\n            onChange={handleChange}\n            placeholder=\"Search movies\"\n            autoComplete=\"off\"\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n      </header>\n    </div>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { fetchSearchMovies } from 'Api';\nimport { FilmList } from 'components/FilmList/FilmList';\n\nconst Movies = () => {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const nameFilms = searchParams.get('query') ?? '';\n\n  const createSearchMovies = query => {\n    setSearchParams(query !== '' ? { query } : {});\n  };\n\n  const searchFilms = useCallback(async () => {\n    try {\n      const movies = await fetchSearchMovies(nameFilms);\n      setFilms(movies);\n    } catch (error) {\n      setError('Failed to load films :(');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [nameFilms]);\n\n  useEffect(() => {\n    nameFilms && searchFilms();\n  }, [nameFilms, searchFilms]);\n\n  return (\n    <main>\n      <Searchbar onSubmit={createSearchMovies} />\n      {!isLoading ? (\n        !error ? (\n          <FilmList films={films} />\n        ) : (\n          <div>{error}</div>\n        )\n      ) : (\n        <div>Loading ...</div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["BASE_URL","KEY","getMovies","url","params","axios","response","data","results","fetchTrendMovie","fetchSearchMovies","query","fetchMoviesReviews","movieId","fetchMoviesDetails","result","fetchMoviesCast","cast","fetchMoviesGenres","filmGenres","genres","map","genre","name","FilmList","films","location","useLocation","id","title","to","state","from","Searchbar","onSubmit","useState","setQuery","event","preventDefault","alert","onChange","currentTarget","value","trim","placeholder","autoComplete","type","setFilms","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","nameFilms","get","searchFilms","useCallback","movies","useEffect"],"sourceRoot":""}